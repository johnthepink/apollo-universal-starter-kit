type User {
    id: Int!
    username: String!
    isAdmin: Boolean
    email: String!
}

type FieldError {
    field: String!
    message: String!
}

type RegisterPayload {
    user: User
    errors: [FieldError!]
}

type AuthPayload {
    tokens: Tokens
    errors: [FieldError!]
}

type ResetPayload {
    errors: [FieldError!]
}

type Tokens {
    token: String!
    refreshToken: String!
}

extend type Query {
    users: [User]
    user(id: Int!): User
    currentUser: User
}

extend type Mutation {
    register(input: RegisterUserInput!): RegisterPayload!
    login(input: LoginUserInput!): AuthPayload!
    logout: Boolean!
    updatePassword(id: Int!, newPassword: String!): Boolean!
    refreshTokens(token: String!, refreshToken: String!): AuthPayload!
    forgotPassword(input: ForgotPasswordInput!): Boolean!
    resetPassword(input: ResetPasswordInput!): ResetPayload!
}

input RegisterUserInput {
    username: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input ForgotPasswordInput {
    email: String!
}

input ResetPasswordInput {
    token: String!
    password: String!
    passwordConfirmation: String!
}

extend type Subscription {
}
